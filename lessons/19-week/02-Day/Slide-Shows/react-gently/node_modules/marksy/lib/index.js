'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.marksy = marksy;

exports.default = function (options) {
  return marksy(options);
};

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _marked = require('marked');

var _marked2 = _interopRequireDefault(_marked);

var _he = require('he');

var _he2 = _interopRequireDefault(_he);

var _babelStandalone = require('babel-standalone');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function marksy() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.components = options.components || {};

  var renderer = new _marked2.default.Renderer();
  var tree = null;
  var elements = null;
  var nextElementId = null;
  var toc = null;

  function getTocPosition(toc, level) {
    var currentLevel = toc.children;
    while (true) {
      if (!currentLevel.length || currentLevel[currentLevel.length - 1].level === level) {
        return currentLevel;
      } else {
        currentLevel = currentLevel[currentLevel.length - 1].children;
      }
    }
  }

  function populateInlineContent() {
    var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var contentArray = content.split(/(\{\{.*?\}\})/);
    var extractedElements = contentArray.map(function (text) {
      var elementIdMatch = text.match(/\{\{(.*)\}\}/);
      if (elementIdMatch) {
        tree.splice(tree.indexOf(elements[elementIdMatch[1]]), 1);
        return elements[elementIdMatch[1]];
      } else if (text != '') {
        return _he2.default.decode(text);
      }

      return null;
    });

    return extractedElements;
  }

  function addElement(tag) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var children = arguments[2];

    var elementId = nextElementId++;
    var inlineContent = null;

    if (children) {
      inlineContent = Array.isArray(children) ? children.map(populateInlineContent) : populateInlineContent(children);
    }

    elements[elementId] = _react2.default.createElement(options[tag] || tag, Object.assign({
      key: elementId
    }, props), inlineContent);

    tree.push(elements[elementId]);

    return '{{' + elementId + '}}';
  }

  renderer.code = function (code, language) {
    if (language === 'marksy') {
      return renderer.html(code);
    } else {
      var elementId = nextElementId++;

      elements[elementId] = _react2.default.createElement('pre', {
        key: elementId,
        className: 'language-' + language
      }, _react2.default.createElement('code', {
        className: 'language-' + language
      }, code));

      tree.push(elements[elementId]);

      return '{{' + elementId + '}}';
    }
  };

  renderer.html = function (html) {
    try {
      var code = (0, _babelStandalone.transform)(html, {
        presets: ['react']
      }).code;
      var components = Object.keys(options.components).map(function (key) {
        return options.components[key];
      });

      tree.push(_react2.default.createElement(function () {
        return new (Function.prototype.bind.apply(Function, [null].concat(['React'], _toConsumableArray(Object.keys(options.components)), ['return ' + code])))().apply(undefined, [_react2.default].concat(_toConsumableArray(components)));
      }, { key: nextElementId++ }));
    } catch (e) {}
  };

  renderer.paragraph = function (text) {
    return addElement('p', null, text);
  };

  renderer.blockquote = function (text) {
    return addElement('blockquote', null, text);
  };

  renderer.link = function (href, title, text) {
    return addElement('a', { href: href, title: title }, text);
  };

  renderer.br = function () {
    return addElement('br');
  };

  renderer.hr = function () {
    return addElement('hr');
  };

  renderer.strong = function (text) {
    return addElement('strong', null, text);
  };

  renderer.del = function (text) {
    return addElement('del', null, text);
  };

  renderer.em = function (text) {
    return addElement('em', null, text);
  };

  renderer.heading = function (text, level) {
    var id = text.replace(/\s/g, '-').toLowerCase();
    var lastToc = toc[toc.length - 1];

    if (!lastToc || lastToc.level > level) {
      toc.push({
        id: id,
        title: text,
        level: level,
        children: []
      });
    } else {
      var tocPosition = getTocPosition(lastToc, level);

      tocPosition.push({
        id: id,
        title: text,
        level: level,
        children: []
      });
    }

    return addElement('h' + level, null, text);
  };

  renderer.list = function (body, ordered) {
    return addElement(ordered ? 'ol' : 'ul', null, body);
  };

  renderer.listitem = function (text) {
    return addElement('li', null, text);
  };

  renderer.table = function (header, body) {
    return addElement('table', null, [addElement('thead', null, header), addElement('tbody', null, body)]);
  };

  renderer.thead = function (content) {
    return addElement('thead', null, content);
  };

  renderer.tbody = function (content) {
    return addElement('tbody', null, content);
  };

  renderer.tablerow = function (content) {
    return addElement('tr', null, content);
  };

  renderer.tablecell = function (content, flag) {
    var tag = flag.header ? 'th' : 'td';
    return addElement('tr', { className: flag.align ? 'text-' + flag.align : undefined }, content);
  };

  renderer.codespan = function (text) {
    return addElement('code', null, text);
  };

  renderer.image = function (href, title, text) {
    return addElement('img', { src: href, alt: text });
  };

  return function compile(content) {
    var markedOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    tree = [];
    elements = {};
    toc = [];
    nextElementId = 0;
    (0, _marked2.default)(content, Object.assign({ renderer: renderer, smartypants: true }, markedOptions));

    return { tree: tree, toc: toc };
  };
}

;
//# sourceMappingURL=index.js.map