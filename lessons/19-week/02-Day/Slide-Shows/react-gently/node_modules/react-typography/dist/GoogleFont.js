'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GoogleFont = function (_React$Component) {
  _inherits(GoogleFont, _React$Component);

  function GoogleFont() {
    _classCallCheck(this, GoogleFont);

    return _possibleConstructorReturn(this, (GoogleFont.__proto__ || Object.getPrototypeOf(GoogleFont)).apply(this, arguments));
  }

  _createClass(GoogleFont, [{
    key: 'render',
    value: function render() {
      // Create family + styles string
      var fontsStr = '';
      if (this.props.typography.options.googleFonts) {
        var fonts = this.props.typography.options.googleFonts.map(function (font) {
          var str = '';
          str += font.name.split(' ').join('+');
          str += ':';
          str += font.styles.join(',');

          return str;
        });

        fontsStr = fonts.join('|');

        if (fontsStr) {
          return _react2.default.DOM.link({
            href: '//fonts.googleapis.com/css?family=' + fontsStr,
            rel: 'stylesheet',
            type: 'text/css'
          });
        }
      }
      return null;
    }
  }]);

  return GoogleFont;
}(_react2.default.Component);

GoogleFont.propTypes = {
  typography: _propTypes2.default.object.isRequired
};

GoogleFont.displayName = 'GoogleFont';

module.exports = GoogleFont;