"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require("react-dom");

var _server = require("react-dom/server");

var _server2 = _interopRequireDefault(_server);

var _babelStandalone = require("babel-standalone");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Preview = function (_Component) {
  _inherits(Preview, _Component);

  function Preview() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Preview);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Preview.__proto__ || Object.getPrototypeOf(Preview)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Preview, [{
    key: "render",
    value: function render() {
      var error = this.state.error;

      return _react2.default.createElement(
        "div",
        null,
        error !== null ? _react2.default.createElement(
          "div",
          { className: "playgroundError" },
          error
        ) : null,
        _react2.default.createElement("div", { ref: "mount", className: "previewArea" })
      );
    }
  }]);

  return Preview;
}(_react.Component);

Preview.defaultProps = {
  previewComponent: "div"
};
Preview.propTypes = {
  code: _propTypes2.default.string.isRequired,
  scope: _propTypes2.default.object.isRequired,
  previewComponent: _propTypes2.default.node,
  noRender: _propTypes2.default.bool,
  context: _propTypes2.default.object
};

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.state = {
    error: null
  };

  this._compileCode = function () {
    var _props = _this2.props,
        code = _props.code,
        context = _props.context,
        noRender = _props.noRender,
        scope = _props.scope;

    var generateContextTypes = function generateContextTypes(c) {
      return "{ " + Object.keys(c).map(function (val) {
        return val + ": React.PropTypes.any.isRequired";
      }).join(", ") + " }";
    };

    if (noRender) {
      return (0, _babelStandalone.transform)("\n        ((" + Object.keys(scope).join(", ") + ", mountNode) => {\n          class Comp extends React.Component {\n\n            getChildContext() {\n              return " + JSON.stringify(context) + ";\n            }\n\n            render() {\n              return (\n                " + code + "\n              );\n            }\n          }\n\n          Comp.childContextTypes = " + generateContextTypes(context) + ";\n\n          return Comp;\n        });\n      ", { presets: ["es2015", "react", "stage-1"] }).code;
    } else {
      return (0, _babelStandalone.transform)("\n        ((" + Object.keys(scope).join(",") + ", mountNode) => {\n          " + code + "\n        });\n      ", { presets: ["es2015", "react", "stage-1"] }).code;
    }
  };

  this._setTimeout = function () {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    clearTimeout(_this2.timeoutID); //eslint-disable-line no-undef
    _this2.timeoutID = setTimeout.apply(null, args); //eslint-disable-line no-undef
  };

  this._executeCode = function () {
    var mountNode = _this2.refs.mount;
    var _props2 = _this2.props,
        scope = _props2.scope,
        noRender = _props2.noRender,
        previewComponent = _props2.previewComponent;

    var tempScope = [];

    try {
      Object.keys(scope).forEach(function (s) {
        return tempScope.push(scope[s]);
      });
      tempScope.push(mountNode);
      var compiledCode = _this2._compileCode();
      if (noRender) {
        /* eslint-disable no-eval, max-len */
        var Comp = _react2.default.createElement(eval(compiledCode).apply(null, tempScope));
        _server2.default.renderToString(_react2.default.createElement(previewComponent, {}, Comp));
        (0, _reactDom.render)(_react2.default.createElement(previewComponent, {}, Comp), mountNode);
      } else {
        eval(compiledCode).apply(null, tempScope);
      }
      /* eslint-enable no-eval, max-len */

      _this2.setState({ error: null });
    } catch (err) {
      _this2._setTimeout(function () {
        _this2.setState({ error: err.toString() });
      }, 500);
    }
  };

  this.componentDidMount = function () {
    _this2._executeCode();
  };

  this.componentDidUpdate = function (prevProps) {
    clearTimeout(_this2.timeoutID); //eslint-disable-line
    if (_this2.props.code !== prevProps.code) {
      _this2._executeCode();
    }
  };
};

exports.default = Preview;