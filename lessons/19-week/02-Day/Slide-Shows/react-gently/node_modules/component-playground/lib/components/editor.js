"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactCodemirror = require("react-codemirror");

var _reactCodemirror2 = _interopRequireDefault(_reactCodemirror);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint new-cap:0 no-unused-vars:0 */


if (typeof window !== "undefined") {
  require("codemirror/mode/jsx/jsx");
}

var Editor = function (_Component) {
  _inherits(Editor, _Component);

  function Editor() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Editor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Editor.__proto__ || Object.getPrototypeOf(Editor)).call.apply(_ref, [this].concat(args))), _this), _this.componentDidMount = function () {
      var editor = _this.refs.editor.getCodeMirror();
      _this.highlightSelectedLines(editor, _this.props.selectedLines);
    }, _this.highlightSelectedLines = function (editor, selectedLines) {
      if (Array.isArray(selectedLines)) {
        selectedLines.forEach(function (lineNumber) {
          return editor.addLineClass(lineNumber, "wrap", "CodeMirror-activeline-background");
        });
      }
    }, _this.updateCode = function (code) {
      if (!_this.props.readOnly && _this.props.onChange) {
        _this.props.onChange(code);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Editor, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          className = _props.className,
          external = _props.external,
          style = _props.style,
          codeText = _props.codeText,
          theme = _props.theme,
          readOnly = _props.readOnly;


      var options = {
        mode: "jsx",
        lineNumbers: false,
        lineWrapping: true,
        smartIndent: false,
        matchBrackets: true,
        theme: theme,
        readOnly: readOnly
      };

      return _react2.default.createElement(_reactCodemirror2.default, {
        ref: "editor",
        className: className,
        external: external,
        options: options,
        style: style,
        value: codeText,
        onChange: this.updateCode });
    }
  }]);

  return Editor;
}(_react.Component);

Editor.propTypes = {
  theme: _propTypes2.default.string,
  readOnly: _propTypes2.default.bool,
  external: _propTypes2.default.bool,
  codeText: _propTypes2.default.string,
  selectedLines: _propTypes2.default.array,
  onChange: _propTypes2.default.func,
  style: _propTypes2.default.object,
  className: _propTypes2.default.string
};
exports.default = Editor;