{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _without2 = require(\"lodash/without\");\n\nvar _without3 = _interopRequireDefault(_without2);\n\nvar _isFunction2 = require(\"lodash/isFunction\");\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _isEmpty2 = require(\"lodash/isEmpty\");\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _partial2 = require(\"lodash/partial\");\n\nvar _partial3 = _interopRequireDefault(_partial2);\n\nvar _merge2 = require(\"lodash/merge\");\n\nvar _merge3 = _interopRequireDefault(_merge2);\n\nvar _extend6 = require(\"lodash/extend\");\n\nvar _extend7 = _interopRequireDefault(_extend6);\n\nvar _assign2 = require(\"lodash/assign\");\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nexports.default = {\n  getEvents: function getEvents(props, target, eventKey, getScopedEvents) {\n    var _this = this;\n\n    var getEventsByTarget = function getEventsByTarget(events) {\n      var getSelectedEvents = function getSelectedEvents() {\n        var targetEvents = events.reduce(function (memo, event) {\n          if (event.target !== undefined) {\n            return \"\" + event.target === \"\" + target ? memo.concat(event) : memo;\n          }\n\n          return memo.concat(event);\n        }, []);\n\n        if (eventKey !== undefined && target !== \"parent\") {\n          return targetEvents.filter(function (obj) {\n            var targetKeys = obj.eventKey;\n\n            var useKey = function useKey(key) {\n              return key ? \"\" + key === \"\" + eventKey : true;\n            };\n\n            return Array.isArray(targetKeys) ? targetKeys.some(function (k) {\n              return useKey(k);\n            }) : useKey(targetKeys);\n          });\n        }\n\n        return targetEvents;\n      };\n\n      var selectedEvents = getSelectedEvents();\n      return Array.isArray(selectedEvents) && selectedEvents.reduce(function (memo, event) {\n        return event ? (0, _assign3.default)(memo, event.eventHandlers) : memo;\n      }, {});\n    };\n\n    var getAllEvents = function getAllEvents() {\n      if (Array.isArray(_this.componentEvents)) {\n        var _componentEvents;\n\n        return Array.isArray(props.events) ? (_componentEvents = _this.componentEvents).concat.apply(_componentEvents, _toConsumableArray(props.events)) : _this.componentEvents;\n      }\n\n      return props.events;\n    };\n\n    var allEvents = getAllEvents();\n    var ownEvents = allEvents && (0, _isFunction3.default)(getScopedEvents) ? getScopedEvents(getEventsByTarget(allEvents), target) : undefined;\n\n    if (!props.sharedEvents) {\n      return ownEvents;\n    }\n\n    var getSharedEvents = props.sharedEvents.getEvents;\n    var sharedEvents = props.sharedEvents.events && getSharedEvents(getEventsByTarget(props.sharedEvents.events), target);\n    return (0, _assign3.default)({}, sharedEvents, ownEvents);\n  },\n  getScopedEvents: function getScopedEvents(events, namespace, childType, baseProps) {\n    var _this2 = this;\n\n    if ((0, _isEmpty3.default)(events)) {\n      return {};\n    }\n\n    baseProps = baseProps || this.baseProps;\n\n    var getTargetProps = function getTargetProps(identifier, type) {\n      var childName = identifier.childName,\n          target = identifier.target,\n          key = identifier.key;\n      var baseType = type === \"props\" ? baseProps : _this2.state;\n      var base = childName === undefined || childName === null || !baseType[childName] ? baseType : baseType[childName];\n      return key === \"parent\" ? base.parent : base[key] && base[key][target];\n    };\n\n    var parseEvent = function parseEvent(eventReturn, eventKey) {\n      var childNames = namespace === \"parent\" ? eventReturn.childName : eventReturn.childName || childType;\n      var target = eventReturn.target || namespace;\n\n      var getKeys = function getKeys(childName) {\n        if (eventReturn.eventKey === \"all\") {\n          return baseProps[childName] ? (0, _without3.default)(Object.keys(baseProps[childName]), \"parent\") : (0, _without3.default)(Object.keys(baseProps), \"parent\");\n        } else if (eventReturn.eventKey === undefined && eventKey === \"parent\") {\n          return baseProps[childName] ? Object.keys(baseProps[childName]) : Object.keys(baseProps);\n        }\n\n        return eventReturn.eventKey !== undefined ? eventReturn.eventKey : eventKey;\n      };\n\n      var getMutationObject = function getMutationObject(key, childName) {\n        var nullFunction = function nullFunction() {\n          return null;\n        };\n\n        var mutationTargetProps = getTargetProps({\n          childName: childName,\n          key: key,\n          target: target\n        }, \"props\");\n        var mutationTargetState = getTargetProps({\n          childName: childName,\n          key: key,\n          target: target\n        }, \"state\");\n        var mutation = eventReturn.mutation || nullFunction;\n        var mutatedProps = mutation((0, _assign3.default)({}, mutationTargetProps, mutationTargetState), baseProps);\n        var childState = _this2.state[childName] || {};\n\n        var extendState = function extendState(state) {\n          return target === \"parent\" ? (0, _extend7.default)(state[key], mutatedProps) : (0, _extend7.default)(state[key], _defineProperty({}, target, mutatedProps));\n        };\n\n        return childName !== undefined && childName !== null ? (0, _extend7.default)(_this2.state, _defineProperty({}, childName, (0, _extend7.default)(childState, _defineProperty({}, key, extendState(childState))))) : (0, _extend7.default)(_this2.state, _defineProperty({}, key, extendState(_this2.state)));\n      };\n\n      var getReturnByChild = function getReturnByChild(childName) {\n        var mutationKeys = getKeys(childName);\n        return Array.isArray(mutationKeys) ? mutationKeys.reduce(function (memo, key) {\n          return (0, _assign3.default)(memo, getMutationObject(key, childName));\n        }, {}) : getMutationObject(mutationKeys, childName);\n      };\n\n      var allChildNames = childNames === \"all\" ? (0, _without3.default)(Object.keys(baseProps), \"parent\") : childNames;\n      return Array.isArray(allChildNames) ? allChildNames.reduce(function (memo, childName) {\n        return (0, _assign3.default)(memo, getReturnByChild(childName));\n      }, {}) : getReturnByChild(allChildNames);\n    };\n\n    var parseEventReturn = function parseEventReturn(eventReturn, eventKey) {\n      return Array.isArray(eventReturn) ? eventReturn.reduce(function (memo, props) {\n        memo = (0, _merge3.default)({}, memo, parseEvent(props, eventKey));\n        return memo;\n      }, {}) : parseEvent(eventReturn, eventKey);\n    };\n\n    var compileCallbacks = function compileCallbacks(eventReturn) {\n      var getCallback = function getCallback(obj) {\n        return (0, _isFunction3.default)(obj.callback) && obj.callback;\n      };\n\n      var callbacks = Array.isArray(eventReturn) ? eventReturn.map(function (evtObj) {\n        return getCallback(evtObj);\n      }) : [getCallback(eventReturn)];\n      var callbackArray = callbacks.filter(function (callback) {\n        return callback !== false;\n      });\n      return callbackArray.length ? function () {\n        return callbackArray.forEach(function (callback) {\n          return callback();\n        });\n      } : undefined;\n    };\n\n    var onEvent = function onEvent(evt, childProps, eventKey, eventName) {\n      var eventReturn = events[eventName](evt, childProps, eventKey, _this2);\n\n      if (eventReturn) {\n        var callbacks = compileCallbacks(eventReturn);\n\n        _this2.setState(parseEventReturn(eventReturn, eventKey), callbacks);\n      }\n    };\n\n    return Object.keys(events).reduce(function (memo, event) {\n      memo[event] = onEvent;\n      return memo;\n    }, {});\n  },\n  getPartialEvents: function getPartialEvents(events, eventKey, childProps) {\n    return events ? Object.keys(events).reduce(function (memo, eventName) {\n      memo[eventName] = (0, _partial3.default)(events[eventName], _partial3.default.placeholder, childProps, eventKey, eventName);\n      return memo;\n    }, {}) : {};\n  },\n  getEventState: function getEventState(eventKey, namespace, childType) {\n    if (!childType) {\n      return eventKey === \"parent\" ? this.state[eventKey] && this.state[eventKey][namespace] || this.state[eventKey] : this.state[eventKey] && this.state[eventKey][namespace];\n    }\n\n    return this.state[childType] && this.state[childType][eventKey] && this.state[childType][eventKey][namespace];\n  },\n  getComponentEvents: function getComponentEvents(props, components) {\n    var events = Array.isArray(components) && components.reduce(function (memo, componentName) {\n      var _memo;\n\n      var component = props[componentName];\n      var componentEvents = component && component.type && component.type.defaultEvents;\n      memo = Array.isArray(componentEvents) ? (_memo = memo).concat.apply(_memo, _toConsumableArray(componentEvents)) : memo;\n      return memo;\n    }, []);\n    return events && events.length ? events : undefined;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}