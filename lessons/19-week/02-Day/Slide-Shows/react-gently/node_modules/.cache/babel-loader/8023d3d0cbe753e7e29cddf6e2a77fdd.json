{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.marksy = marksy;\n\nexports.default = function (options) {\n  return marksy(options);\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _marked = require('marked');\n\nvar _marked2 = _interopRequireDefault(_marked);\n\nvar _he = require('he');\n\nvar _he2 = _interopRequireDefault(_he);\n\nvar _babelStandalone = require('babel-standalone');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction marksy() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  options.components = options.components || {};\n  var renderer = new _marked2.default.Renderer();\n  var tree = null;\n  var elements = null;\n  var nextElementId = null;\n  var toc = null;\n\n  function getTocPosition(toc, level) {\n    var currentLevel = toc.children;\n\n    while (true) {\n      if (!currentLevel.length || currentLevel[currentLevel.length - 1].level === level) {\n        return currentLevel;\n      } else {\n        currentLevel = currentLevel[currentLevel.length - 1].children;\n      }\n    }\n  }\n\n  function populateInlineContent() {\n    var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var contentArray = content.split(/(\\{\\{.*?\\}\\})/);\n    var extractedElements = contentArray.map(function (text) {\n      var elementIdMatch = text.match(/\\{\\{(.*)\\}\\}/);\n\n      if (elementIdMatch) {\n        tree.splice(tree.indexOf(elements[elementIdMatch[1]]), 1);\n        return elements[elementIdMatch[1]];\n      } else if (text != '') {\n        return _he2.default.decode(text);\n      }\n\n      return null;\n    });\n    return extractedElements;\n  }\n\n  function addElement(tag) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var children = arguments[2];\n    var elementId = nextElementId++;\n    var inlineContent = null;\n\n    if (children) {\n      inlineContent = Array.isArray(children) ? children.map(populateInlineContent) : populateInlineContent(children);\n    }\n\n    elements[elementId] = _react2.default.createElement(options[tag] || tag, Object.assign({\n      key: elementId\n    }, props), inlineContent);\n    tree.push(elements[elementId]);\n    return '{{' + elementId + '}}';\n  }\n\n  renderer.code = function (code, language) {\n    if (language === 'marksy') {\n      return renderer.html(code);\n    } else {\n      var elementId = nextElementId++;\n      elements[elementId] = _react2.default.createElement('pre', {\n        key: elementId,\n        className: 'language-' + language\n      }, _react2.default.createElement('code', {\n        className: 'language-' + language\n      }, code));\n      tree.push(elements[elementId]);\n      return '{{' + elementId + '}}';\n    }\n  };\n\n  renderer.html = function (html) {\n    try {\n      var code = (0, _babelStandalone.transform)(html, {\n        presets: ['react']\n      }).code;\n      var components = Object.keys(options.components).map(function (key) {\n        return options.components[key];\n      });\n      tree.push(_react2.default.createElement(function () {\n        return new (Function.prototype.bind.apply(Function, [null].concat(['React'], _toConsumableArray(Object.keys(options.components)), ['return ' + code])))().apply(undefined, [_react2.default].concat(_toConsumableArray(components)));\n      }, {\n        key: nextElementId++\n      }));\n    } catch (e) {}\n  };\n\n  renderer.paragraph = function (text) {\n    return addElement('p', null, text);\n  };\n\n  renderer.blockquote = function (text) {\n    return addElement('blockquote', null, text);\n  };\n\n  renderer.link = function (href, title, text) {\n    return addElement('a', {\n      href: href,\n      title: title\n    }, text);\n  };\n\n  renderer.br = function () {\n    return addElement('br');\n  };\n\n  renderer.hr = function () {\n    return addElement('hr');\n  };\n\n  renderer.strong = function (text) {\n    return addElement('strong', null, text);\n  };\n\n  renderer.del = function (text) {\n    return addElement('del', null, text);\n  };\n\n  renderer.em = function (text) {\n    return addElement('em', null, text);\n  };\n\n  renderer.heading = function (text, level) {\n    var id = text.replace(/\\s/g, '-').toLowerCase();\n    var lastToc = toc[toc.length - 1];\n\n    if (!lastToc || lastToc.level > level) {\n      toc.push({\n        id: id,\n        title: text,\n        level: level,\n        children: []\n      });\n    } else {\n      var tocPosition = getTocPosition(lastToc, level);\n      tocPosition.push({\n        id: id,\n        title: text,\n        level: level,\n        children: []\n      });\n    }\n\n    return addElement('h' + level, null, text);\n  };\n\n  renderer.list = function (body, ordered) {\n    return addElement(ordered ? 'ol' : 'ul', null, body);\n  };\n\n  renderer.listitem = function (text) {\n    return addElement('li', null, text);\n  };\n\n  renderer.table = function (header, body) {\n    return addElement('table', null, [addElement('thead', null, header), addElement('tbody', null, body)]);\n  };\n\n  renderer.thead = function (content) {\n    return addElement('thead', null, content);\n  };\n\n  renderer.tbody = function (content) {\n    return addElement('tbody', null, content);\n  };\n\n  renderer.tablerow = function (content) {\n    return addElement('tr', null, content);\n  };\n\n  renderer.tablecell = function (content, flag) {\n    var tag = flag.header ? 'th' : 'td';\n    return addElement('tr', {\n      className: flag.align ? 'text-' + flag.align : undefined\n    }, content);\n  };\n\n  renderer.codespan = function (text) {\n    return addElement('code', null, text);\n  };\n\n  renderer.image = function (href, title, text) {\n    return addElement('img', {\n      src: href,\n      alt: text\n    });\n  };\n\n  return function compile(content) {\n    var markedOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    tree = [];\n    elements = {};\n    toc = [];\n    nextElementId = 0;\n    (0, _marked2.default)(content, Object.assign({\n      renderer: renderer,\n      smartypants: true\n    }, markedOptions));\n    return {\n      tree: tree,\n      toc: toc\n    };\n  };\n}\n\n;","map":null,"metadata":{},"sourceType":"script"}