{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar GoogleFont = function (_React$Component) {\n  _inherits(GoogleFont, _React$Component);\n\n  function GoogleFont() {\n    _classCallCheck(this, GoogleFont);\n\n    return _possibleConstructorReturn(this, (GoogleFont.__proto__ || Object.getPrototypeOf(GoogleFont)).apply(this, arguments));\n  }\n\n  _createClass(GoogleFont, [{\n    key: 'render',\n    value: function render() {\n      // Create family + styles string\n      var fontsStr = '';\n\n      if (this.props.typography.options.googleFonts) {\n        var fonts = this.props.typography.options.googleFonts.map(function (font) {\n          var str = '';\n          str += font.name.split(' ').join('+');\n          str += ':';\n          str += font.styles.join(',');\n          return str;\n        });\n        fontsStr = fonts.join('|');\n\n        if (fontsStr) {\n          return _react2.default.DOM.link({\n            href: '//fonts.googleapis.com/css?family=' + fontsStr,\n            rel: 'stylesheet',\n            type: 'text/css'\n          });\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return GoogleFont;\n}(_react2.default.Component);\n\nGoogleFont.propTypes = {\n  typography: _propTypes2.default.object.isRequired\n};\nGoogleFont.displayName = 'GoogleFont';\nmodule.exports = GoogleFont;","map":null,"metadata":{},"sourceType":"script"}