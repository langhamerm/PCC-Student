{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _identity2 = require(\"lodash/identity\");\n\nvar _identity3 = _interopRequireDefault(_identity2);\n\nvar _defaults2 = require(\"lodash/defaults\");\n\nvar _defaults3 = _interopRequireDefault(_defaults2);\n\nvar _assign2 = require(\"lodash/assign\");\n\nvar _assign3 = _interopRequireDefault(_assign2);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getDatumKey(datum, idx) {\n  return (datum.key || idx).toString();\n}\n\nfunction getKeyedData(data) {\n  return data.reduce(function (keyedData, datum, idx) {\n    var key = getDatumKey(datum, idx);\n    keyedData[key] = datum;\n    return keyedData;\n  }, {});\n}\n\nfunction getKeyedDataDifference(a, b) {\n  var hasDifference = false;\n  var difference = Object.keys(a).reduce(function (_difference, key) {\n    if (!(key in b)) {\n      hasDifference = true;\n      _difference[key] = true;\n    }\n\n    return _difference;\n  }, {});\n  return hasDifference && difference;\n}\n\nfunction getNodeTransitions(oldData, nextData) {\n  var oldDataKeyed = oldData && getKeyedData(oldData);\n  var nextDataKeyed = nextData && getKeyedData(nextData);\n  return {\n    entering: oldDataKeyed && getKeyedDataDifference(nextDataKeyed, oldDataKeyed),\n    exiting: nextDataKeyed && getKeyedDataDifference(oldDataKeyed, nextDataKeyed)\n  };\n}\n\nfunction getChildData(child) {\n  if (child.type && child.type.getData) {\n    return child.type.getData(child.props);\n  }\n\n  return child.props && child.props.data || false;\n}\n\nfunction getInitialTransitionState(oldChildren, nextChildren) {\n  var nodesWillExit = false;\n  var nodesWillEnter = false;\n\n  var getTransition = function getTransition(oldChild, newChild) {\n    if (!newChild || oldChild.type !== newChild.type) {\n      return {};\n    }\n\n    var _ref = getNodeTransitions(getChildData(oldChild), getChildData(newChild)) || {},\n        entering = _ref.entering,\n        exiting = _ref.exiting;\n\n    nodesWillExit = nodesWillExit || !!exiting;\n    nodesWillEnter = nodesWillEnter || !!entering;\n    return {\n      entering: entering || false,\n      exiting: exiting || false\n    };\n  };\n\n  var getTransitionsFromChildren = function getTransitionsFromChildren(old, next) {\n    return old.map(function (child, idx) {\n      if (child && child.props && child.props.children) {\n        return getTransitionsFromChildren(_react2.default.Children.toArray(old[idx].props.children), _react2.default.Children.toArray(next[idx].props.children));\n      }\n\n      return getTransition(child, next[idx]);\n    });\n  };\n\n  var childrenTransitions = getTransitionsFromChildren(_react2.default.Children.toArray(oldChildren), _react2.default.Children.toArray(nextChildren));\n  return {\n    nodesWillExit: nodesWillExit,\n    nodesWillEnter: nodesWillEnter,\n    childrenTransitions: childrenTransitions,\n    nodesShouldEnter: false\n  };\n}\n\nfunction getInitialChildProps(animate, data) {\n  var after = animate.onEnter && animate.onEnter.after ? animate.onEnter.after : _identity3.default;\n  return {\n    data: data.map(function (datum) {\n      return (0, _assign3.default)({}, datum, after(datum));\n    })\n  };\n}\n\nfunction getChildBeforeLoad(animate, child, data, cb) {\n  animate = (0, _assign3.default)({}, animate, {\n    onEnd: cb\n  });\n\n  if (animate && animate.onLoad && !animate.onLoad.duration) {\n    return {\n      animate: animate,\n      data: data\n    };\n  }\n\n  var before = animate.onLoad && animate.onLoad.before ? animate.onLoad.before : _identity3.default;\n  data = data.map(function (datum) {\n    return (0, _assign3.default)({}, datum, before(datum));\n  });\n  return {\n    animate: animate,\n    data: data,\n    clipWidth: 0\n  };\n}\n\nfunction getChildOnLoad(animate, data, cb) {\n  animate = (0, _assign3.default)({}, animate, {\n    onEnd: cb\n  });\n\n  if (animate && animate.onLoad && !animate.onLoad.duration) {\n    return {\n      animate: animate,\n      data: data\n    };\n  }\n\n  var after = animate.onLoad && animate.onLoad.after ? animate.onLoad.after : _identity3.default;\n  data = data.map(function (datum) {\n    return (0, _assign3.default)({}, datum, after(datum));\n  });\n  return {\n    animate: animate,\n    data: data\n  };\n}\n\nfunction getChildPropsOnExit(animate, child, data, exitingNodes, cb) {\n  var onExit = animate && animate.onExit;\n  animate = (0, _assign3.default)({}, animate, onExit);\n\n  if (exitingNodes) {\n    animate.onEnd = cb;\n    var before = animate.onExit && animate.onExit.before ? animate.onExit.before : _identity3.default;\n    data = data.map(function (datum, idx) {\n      var key = (datum.key || idx).toString();\n      return exitingNodes[key] ? (0, _assign3.default)({}, datum, before(datum)) : datum;\n    });\n  }\n\n  return {\n    animate: animate,\n    data: data\n  };\n}\n\nfunction getChildPropsBeforeEnter(animate, child, data, enteringNodes, cb) {\n  if (enteringNodes) {\n    animate = (0, _assign3.default)({}, animate, {\n      onEnd: cb\n    });\n    var before = animate.onEnter && animate.onEnter.before ? animate.onEnter.before : _identity3.default;\n    data = data.map(function (datum, idx) {\n      var key = (datum.key || idx).toString();\n      return enteringNodes[key] ? (0, _assign3.default)({}, datum, before(datum)) : datum;\n    });\n  }\n\n  return {\n    animate: animate,\n    data: data\n  };\n}\n\nfunction getChildPropsOnEnter(animate, data, enteringNodes, cb) {\n  var onEnter = animate && animate.onEnter;\n  animate = (0, _assign3.default)({}, animate, onEnter);\n\n  if (enteringNodes) {\n    animate.onEnd = cb;\n    var after = animate.onEnter && animate.onEnter.after ? animate.onEnter.after : _identity3.default;\n    data = data.map(function (datum, idx) {\n      var key = getDatumKey(datum, idx);\n      return enteringNodes[key] ? (0, _assign3.default)({}, datum, after(datum)) : datum;\n    });\n  }\n\n  return {\n    animate: animate,\n    data: data\n  };\n}\n\nfunction getTransitionPropsFactory(props, state, setState) {\n  var nodesWillExit = state && state.nodesWillExit;\n  var nodesWillEnter = state && state.nodesWillEnter;\n  var nodesShouldEnter = state && state.nodesShouldEnter;\n  var nodesShouldLoad = state && state.nodesShouldLoad;\n  var nodesDoneLoad = state && state.nodesDoneLoad;\n  var childrenTransitions = state && state.childrenTransitions || [];\n  var transitionDurations = {\n    enter: props.animate && props.animate.onEnter && props.animate.onEnter.duration,\n    exit: props.animate && props.animate.onExit && props.animate.onExit.duration,\n    load: props.animate && props.animate.onLoad && props.animate.onLoad.duration,\n    move: props.animate && props.animate.duration\n  };\n\n  var onLoad = function onLoad(child, data, animate) {\n    if (nodesShouldLoad) {\n      return getChildOnLoad(animate, data, function () {\n        setState({\n          nodesShouldLoad: false,\n          nodesDoneLoad: true\n        });\n      });\n    }\n\n    return getChildBeforeLoad(animate, child, data, function () {\n      setState({\n        nodesDoneLoad: true\n      });\n    });\n  };\n\n  var onExit = function onExit(nodes, child, data, animate) {\n    return getChildPropsOnExit(animate, child, data, nodes, function () {\n      setState({\n        nodesWillExit: false\n      });\n    });\n  };\n\n  var onEnter = function onEnter(nodes, child, data, animate) {\n    if (nodesShouldEnter) {\n      return getChildPropsOnEnter(animate, data, nodes, function () {\n        setState({\n          nodesWillEnter: false\n        });\n      });\n    }\n\n    return getChildPropsBeforeEnter(animate, child, data, nodes, function () {\n      setState({\n        nodesShouldEnter: true\n      });\n    });\n  };\n\n  var getChildTransitionDuration = function getChildTransitionDuration(child, type) {\n    var animate = child.props.animate;\n    var defaultTransitions = child.type && child.type.defaultTransitions;\n\n    if (defaultTransitions) {\n      var animationDuration = animate[type] && animate[type].duration;\n      return animationDuration !== undefined ? animationDuration : defaultTransitions[type] && defaultTransitions[type].duration;\n    }\n\n    return {};\n  };\n\n  return function getTransitionProps(child, index) {\n    var data = getChildData(child) || [];\n    var animate = (0, _defaults3.default)({}, props.animate, child.props.animate);\n    animate.onExit = (0, _defaults3.default)({}, animate.onExit, child.type.defaultTransitions && child.type.defaultTransitions.onExit);\n    animate.onEnter = (0, _defaults3.default)({}, animate.onEnter, child.type.defaultTransitions && child.type.defaultTransitions.onEnter);\n    animate.onLoad = (0, _defaults3.default)({}, animate.onLoad, child.type.defaultTransitions && child.type.defaultTransitions.onLoad);\n    var childTransitions = childrenTransitions[index] || childrenTransitions[0];\n\n    if (!nodesDoneLoad) {\n      var load = transitionDurations.load !== undefined ? transitionDurations.load : getChildTransitionDuration(child, \"onLoad\");\n      var animation = {\n        duration: load\n      };\n      return onLoad(child, data, (0, _assign3.default)({}, animate, animation));\n    } else if (nodesWillExit) {\n      var exitingNodes = childTransitions && childTransitions.exiting;\n      var exit = transitionDurations.exit !== undefined ? transitionDurations.exit : getChildTransitionDuration(child, \"onExit\");\n\n      var _animation = exitingNodes ? {\n        duration: exit\n      } : {\n        delay: exit\n      };\n\n      return onExit(exitingNodes, child, data, (0, _assign3.default)({}, animate, _animation));\n    } else if (nodesWillEnter) {\n      var enteringNodes = childTransitions && childTransitions.entering;\n      var enter = transitionDurations.enter !== undefined ? transitionDurations.enter : getChildTransitionDuration(child, \"onEnter\");\n      var move = transitionDurations.move !== undefined ? transitionDurations.move : child.props.animate && child.props.animate.duration;\n      var _animation2 = {\n        duration: nodesShouldEnter && enteringNodes ? enter : move\n      };\n      return onEnter(enteringNodes, child, data, (0, _assign3.default)({}, animate, _animation2));\n    } else if (!state && animate && animate.onExit) {\n      return getInitialChildProps(animate, data);\n    }\n\n    return {\n      animate: animate,\n      data: data\n    };\n  };\n}\n\nexports.default = {\n  getInitialTransitionState: getInitialTransitionState,\n  getTransitionPropsFactory: getTransitionPropsFactory\n};","map":null,"metadata":{},"sourceType":"script"}