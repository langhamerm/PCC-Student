{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renderTransition = exports.Transitionable = undefined;\n\nvar _jsx2 = require('babel-runtime/helpers/jsx');\n\nvar _jsx3 = _interopRequireDefault(_jsx2);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _victoryCore = require('victory-core');\n\nvar _findIndex = require('lodash/findIndex');\n\nvar _findIndex2 = _interopRequireDefault(_findIndex);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Decorator for adding Spectacle transition support\n * to components' ReactCSSTransitionGroup lifecycle functions.\n * @param {class} target The class to be decorated as Transitionable\n * @returns {object} The transition animation lifecyle functions\n */\n\n\nvar Transitionable = function Transitionable(target) {\n  var transitionable = {\n    componentWillEnter: function componentWillEnter(callback) {\n      this.setState({\n        transitioning: false,\n        reverse: false,\n        z: 1\n      });\n      this.routerCallback(callback);\n    },\n    componentWillAppear: function componentWillAppear(callback) {\n      this.setState({\n        transitioning: false,\n        reverse: false,\n        z: 1\n      });\n      this.routerCallback(callback);\n    },\n    componentWillLeave: function componentWillLeave(callback) {\n      this.setState({\n        transitioning: true,\n        reverse: true,\n        z: ''\n      });\n      this.routerCallback(callback);\n    },\n    routerCallback: function routerCallback(callback) {\n      var _props = this.props,\n          transition = _props.transition,\n          transitionDuration = _props.transitionDuration;\n\n      if (transition.length > 0) {\n        setTimeout(function () {\n          return callback();\n        }, transitionDuration);\n      } else {\n        callback();\n      }\n    },\n    transitionDirection: function transitionDirection() {\n      var _props2 = this.props,\n          slideIndex = _props2.slideIndex,\n          lastSlideIndex = _props2.lastSlideIndex;\n\n      var routeSlideIndex = this._getRouteSlideIndex();\n\n      return this.state.reverse ? slideIndex > routeSlideIndex : slideIndex > lastSlideIndex;\n    },\n    getTransitionStyles: function getTransitionStyles() {\n      var _props$transition = this.props.transition,\n          transition = _props$transition === undefined ? [] : _props$transition;\n      var _state = this.state,\n          transitioning = _state.transitioning,\n          z = _state.z;\n      var styles = {\n        zIndex: z\n      };\n      var transformValue = '';\n\n      if (transition.indexOf('fade') !== -1) {\n        styles = (0, _extends3.default)({}, styles, {\n          opacity: transitioning ? 0 : 1\n        });\n      }\n\n      if (transition.indexOf('zoom') !== -1) {\n        transformValue += ' scale(' + (transitioning ? 0.1 : 1.0) + ')';\n      }\n\n      if (transition.indexOf('slide') !== -1) {\n        var offset = this.transitionDirection() ? 100 : -100;\n        transformValue += ' translate3d(' + (transitioning ? offset : 0) + '%, 0, 0)';\n      } else {\n        transformValue += ' translate3d(0px, 0px, 0px)';\n      }\n\n      if (transition.indexOf('spin') !== -1) {\n        var angle = this.transitionDirection() ? 90 : -90;\n        transformValue += ' rotateY(' + (transitioning ? angle : 0) + 'deg)';\n      }\n\n      return (0, _extends3.default)({}, styles, {\n        transform: transformValue\n      });\n    },\n    _getRouteSlideIndex: function _getRouteSlideIndex() {\n      var slideReference = this.props.slideReference;\n      var slide = this.context.store.getState().route.slide;\n      var slideIndex = (0, _findIndex2.default)(slideReference, function (reference) {\n        return slide === String(reference.id);\n      });\n      return Math.max(0, slideIndex);\n    }\n  };\n  (0, _assign2.default)(target.prototype, transitionable);\n};\n/**\n * Decorator for rendering the transition. Wraps the `render` function\n * output of a component with a `VictoryAnimation` component that performs\n * the transition animation.\n * @param {class} target The class of the decorated function\n * @param {string} name The name of the decorated function\n * @param {object} descriptor The descriptor of the decorated function\n * @returns {object} descriptor A modified descriptor of the wrapped\n * transitionable render function\n */\n\n/*eslint new-cap:0, max-statements:0*/\n\n\nvar renderTransition = function renderTransition(target, name, descriptor) {\n  var originalFunc = descriptor.value;\n\n  descriptor.value = function wrap() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var content = originalFunc.call.apply(originalFunc, [this].concat(args));\n    var transitionDuration = this.props.transitionDuration;\n    return (0, _jsx3.default)(_victoryCore.VictoryAnimation, {\n      data: this.getTransitionStyles(),\n      duration: transitionDuration,\n      easing: 'quadInOut'\n    }, void 0, function (animatableStyles) {\n      return (0, _react.cloneElement)(content, {\n        style: [].concat(content.props.style, [animatableStyles])\n      });\n    });\n  };\n\n  return descriptor;\n};\n\nexports.Transitionable = Transitionable;\nexports.renderTransition = renderTransition;","map":null,"metadata":{},"sourceType":"script"}