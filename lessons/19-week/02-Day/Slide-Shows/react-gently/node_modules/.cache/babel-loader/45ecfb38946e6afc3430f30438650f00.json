{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isEqual2 = require(\"lodash/isEqual\");\n\nvar _isEqual3 = _interopRequireDefault(_isEqual2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nexports.default = {\n  isNonEmptyArray: function isNonEmptyArray(collection) {\n    return Array.isArray(collection) && collection.length > 0;\n  },\n  containsStrings: function containsStrings(collection) {\n    return Array.isArray(collection) && collection.some(function (value) {\n      return typeof value === \"string\";\n    });\n  },\n  containsDates: function containsDates(collection) {\n    return Array.isArray(collection) && collection.some(function (value) {\n      return value instanceof Date;\n    });\n  },\n  containsNumbers: function containsNumbers(collection) {\n    return Array.isArray(collection) && collection.some(function (value) {\n      return typeof value === \"number\";\n    });\n  },\n  containsOnlyStrings: function containsOnlyStrings(collection) {\n    return this.isNonEmptyArray(collection) && collection.every(function (value) {\n      return typeof value === \"string\";\n    });\n  },\n  isArrayOfArrays: function isArrayOfArrays(collection) {\n    return this.isNonEmptyArray(collection) && collection.every(Array.isArray);\n  },\n  removeUndefined: function removeUndefined(arr) {\n    return arr.filter(function (el) {\n      return el !== undefined;\n    });\n  },\n  getMaxValue: function getMaxValue(arr) {\n    for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      values[_key - 1] = arguments[_key];\n    }\n\n    var array = arr.concat(values);\n    return this.containsDates(array) ? new Date(Math.max.apply(Math, _toConsumableArray(array))) : Math.max.apply(Math, _toConsumableArray(array));\n  },\n  getMinValue: function getMinValue(arr) {\n    for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      values[_key2 - 1] = arguments[_key2];\n    }\n\n    var array = arr.concat(values);\n    return this.containsDates(array) ? new Date(Math.min.apply(Math, _toConsumableArray(array))) : Math.min.apply(Math, _toConsumableArray(array));\n  },\n  splitArray: function splitArray(array, delimiterFn) {\n    var segmentStartIndex = 0;\n    var segments = array.reduce(function (memo, item, index) {\n      if (delimiterFn(item)) {\n        memo = memo.concat([array.slice(segmentStartIndex, index)]);\n        segmentStartIndex = index + 1;\n      } else if (index === array.length - 1) {\n        memo = memo.concat([array.slice(segmentStartIndex, array.length)]);\n      }\n\n      return memo;\n    }, []);\n    return segments.filter(function (segment) {\n      return Array.isArray(segment) && segment.length > 0;\n    });\n  },\n  allSetsEqual: function allSetsEqual(itemSets) {\n    return itemSets.every(function (comparisonSet) {\n      return (0, _isEqual3.default)(comparisonSet[0], comparisonSet[1]);\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}