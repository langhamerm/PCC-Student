{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*eslint max-statements:0,complexity:0,no-invalid-this:0*/\n\nvar parseFontSize = function parseFontSize(fontSize) {\n  var sizeComponents = fontSize.match(/\\d*\\.*\\d+|\\D+/g);\n  var size = parseFloat(sizeComponents[0]);\n  var unit = sizeComponents[1];\n  return {\n    size: size,\n    unit: unit\n  };\n};\n\nvar getFontSizeFromElement = function getFontSizeFromElement(element) {\n  var fontSize = window.getComputedStyle ? window.getComputedStyle(element).getPropertyValue('font-size') : element.currentStyle.fontSize;\n  return fontSize ? parseFontSize(fontSize) : null;\n};\n\nvar convertFontSizeToPx = function convertFontSizeToPx(fontSize) {\n  var convertedFontSize = void 0;\n\n  if (typeof textSize === 'number') {\n    convertedFontSize = fontSize;\n  } else if (typeof fontSize === 'string') {\n    var parsedFont = parseFontSize(fontSize);\n    var bodyFont = getFontSizeFromElement(document.body);\n    var htmlFont = getFontSizeFromElement(document.documentElement);\n\n    switch (parsedFont.unit) {\n      case 'px':\n        convertedFontSize = parsedFont.size;\n        break;\n\n      case 'pt':\n        convertedFontSize = parsedFont.size * 96 / 72;\n        break;\n\n      case '%':\n        if (bodyFont) {\n          convertedFontSize = bodyFont.size * parsedFont.size / 100;\n        }\n\n        break;\n\n      case 'em':\n        if (bodyFont) {\n          convertedFontSize = bodyFont.size * parsedFont.size;\n        }\n\n        break;\n\n      case 'rem':\n        if (htmlFont) {\n          convertedFontSize = htmlFont.size * parsedFont.size;\n        }\n\n        break;\n    }\n  }\n\n  return convertedFontSize;\n};\n\nvar getStyles = exports.getStyles = function getStyles() {\n  if (process.env.NODE_ENV !== 'production' && typeof this.warnedAboutFontSize === 'undefined') {\n    this.warnedAboutFontSize = false;\n  }\n\n  var _props = this.props,\n      italic = _props.italic,\n      bold = _props.bold,\n      caps = _props.caps,\n      margin = _props.margin,\n      padding = _props.padding,\n      textColor = _props.textColor,\n      textFont = _props.textFont,\n      textSize = _props.textSize,\n      textAlign = _props.textAlign,\n      bgColor = _props.bgColor,\n      bgImage = _props.bgImage,\n      bgDarken = _props.bgDarken,\n      bgSize = _props.bgSize,\n      bgPosition = _props.bgPosition,\n      bgRepeat = _props.bgRepeat;\n  var styles = {};\n  var recommendedMinFontSizePx = 24;\n\n  if (typeof italic === 'boolean') {\n    styles.fontStyle = italic ? 'italic' : 'normal';\n  }\n\n  if (typeof bold === 'boolean') {\n    styles.fontWeight = bold ? 'bold' : 'normal';\n  }\n\n  if (typeof caps === 'boolean') {\n    styles.textTransform = caps ? 'uppercase' : 'none';\n  }\n\n  if (margin) {\n    styles.margin = margin;\n  }\n\n  if (padding) {\n    styles.padding = padding;\n  }\n\n  if (textColor) {\n    var color = '';\n\n    if (!this.context.styles.colors.hasOwnProperty(textColor)) {\n      color = textColor;\n    } else {\n      color = this.context.styles.colors[textColor];\n    }\n\n    styles.color = color;\n  }\n\n  if (textFont) {\n    var font = '';\n\n    if (!this.context.styles.fonts.hasOwnProperty(textFont)) {\n      font = textFont;\n    } else {\n      font = this.context.styles.fonts[textFont];\n    }\n\n    styles.fontFamily = font;\n  }\n\n  if (textSize) {\n    styles.fontSize = textSize;\n\n    if (process.env.NODE_ENV !== 'production' && !this.warnedAboutFontSize && this.context.store.getState().style.globalStyleSet) {\n      var fontSize = convertFontSizeToPx(textSize) || recommendedMinFontSizePx;\n\n      if (fontSize < recommendedMinFontSizePx) {\n        console.warn('prop `textSize=\"' + textSize + '\"` is below the recommended minimum of ' + recommendedMinFontSizePx + 'px'); // eslint-disable-line\n\n        this.warnedAboutFontSize = true;\n      }\n    }\n  }\n\n  if (textAlign) {\n    styles.textAlign = textAlign;\n  }\n\n  if (bgColor) {\n    var _color = '';\n\n    if (!this.context.styles.colors.hasOwnProperty(bgColor)) {\n      _color = bgColor;\n    } else {\n      _color = this.context.styles.colors[bgColor];\n    }\n\n    styles.backgroundColor = _color;\n  }\n\n  if (bgImage) {\n    if (bgDarken) {\n      styles.backgroundImage = 'linear-gradient( rgba(0, 0, 0, ' + bgDarken + '), rgba(0, 0, 0, ' + bgDarken + ') ), url(' + bgImage + ')';\n    } else {\n      styles.backgroundImage = 'url(' + bgImage + ')';\n    }\n\n    styles.backgroundSize = bgSize || 'cover';\n    styles.backgroundPosition = bgPosition || 'center center';\n\n    if (bgRepeat) {\n      styles.backgroundRepeat = bgRepeat;\n    }\n  }\n\n  return styles;\n};","map":null,"metadata":{},"sourceType":"script"}