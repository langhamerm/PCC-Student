{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _jsx2 = require('babel-runtime/helpers/jsx');\n\nvar _jsx3 = _interopRequireDefault(_jsx2);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _isFinite = require('babel-runtime/core-js/number/is-finite');\n\nvar _isFinite2 = _interopRequireDefault(_isFinite);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _dec, _class, _class2, _temp;\n/*eslint new-cap:0, max-statements:0*/\n\n/* eslint react/no-did-mount-set-state: 0 */\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _TransitionGroup = require('react-transition-group/TransitionGroup');\n\nvar _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);\n\nvar _radium = require('radium');\n\nvar _radium2 = _interopRequireDefault(_radium);\n\nvar _filter = require('lodash/filter');\n\nvar _filter2 = _interopRequireDefault(_filter);\n\nvar _size = require('lodash/size');\n\nvar _size2 = _interopRequireDefault(_size);\n\nvar _findIndex = require('lodash/findIndex');\n\nvar _findIndex2 = _interopRequireDefault(_findIndex);\n\nvar _reactRedux = require('react-redux');\n\nvar _actions = require('../actions');\n\nvar _typeface = require('./typeface');\n\nvar _typeface2 = _interopRequireDefault(_typeface);\n\nvar _slides = require('../utils/slides');\n\nvar _presenter = require('./presenter');\n\nvar _presenter2 = _interopRequireDefault(_presenter);\n\nvar _export = require('./export');\n\nvar _export2 = _interopRequireDefault(_export);\n\nvar _overview = require('./overview');\n\nvar _overview2 = _interopRequireDefault(_overview);\n\nvar _autoplayControls = require('./autoplay-controls');\n\nvar _autoplayControls2 = _interopRequireDefault(_autoplayControls);\n\nvar _fullscreen = require('./fullscreen');\n\nvar _fullscreen2 = _interopRequireDefault(_fullscreen);\n\nvar _progress = require('./progress');\n\nvar _progress2 = _interopRequireDefault(_progress);\n\nvar _controls = require('./controls');\n\nvar _controls2 = _interopRequireDefault(_controls);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar TransitionGroup = (0, _radium2.default)(_TransitionGroup2.default);\n\nvar _ref = (0, _jsx3.default)(_fullscreen2.default, {});\n\nvar Manager = (_dec = (0, _reactRedux.connect)(function (state) {\n  return state;\n}), _dec(_class = (0, _radium2.default)(_class = (_temp = _class2 = function (_Component) {\n  (0, _inherits3.default)(Manager, _Component);\n\n  function Manager(props) {\n    (0, _classCallCheck3.default)(this, Manager);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));\n\n    _this._handleKeyPress = _this._handleKeyPress.bind(_this);\n    _this._handleScreenChange = _this._handleScreenChange.bind(_this);\n    _this.handleClick = _this.handleClick.bind(_this);\n    _this._goToSlide = _this._goToSlide.bind(_this);\n    _this._startAutoplay = _this._startAutoplay.bind(_this);\n    _this._stopAutoplay = _this._stopAutoplay.bind(_this);\n    _this.state = {\n      lastSlideIndex: null,\n      slideReference: [],\n      fullscreen: window.innerHeight === screen.height,\n      mobile: window.innerWidth < props.contentWidth,\n      autoplaying: props.autoplay\n    };\n    return _this;\n  }\n\n  Manager.prototype.getChildContext = function getChildContext() {\n    return {\n      contentWidth: this.props.contentWidth,\n      contentHeight: this.props.contentHeight\n    };\n  };\n\n  Manager.prototype.componentWillMount = function componentWillMount() {\n    this.setState({\n      slideReference: this._buildSlideReference()\n    });\n  };\n\n  Manager.prototype.componentDidMount = function componentDidMount() {\n    var slideIndex = this._getSlideIndex();\n\n    this.setState({\n      lastSlideIndex: slideIndex\n    });\n\n    this._attachEvents();\n\n    if (this.props.autoplay) {\n      this._startAutoplay();\n    }\n  };\n\n  Manager.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this.props.globalStyles && !this.context.store.getState().style.globalStyleSet) {\n      this.props.dispatch((0, _actions.setGlobalStyle)());\n    }\n  };\n\n  Manager.prototype.componentWillUnmount = function componentWillUnmount() {\n    this._detachEvents();\n  };\n\n  Manager.prototype._attachEvents = function _attachEvents() {\n    window.addEventListener('storage', this._goToSlide);\n    window.addEventListener('keydown', this._handleKeyPress);\n    window.addEventListener('resize', this._handleScreenChange);\n  };\n\n  Manager.prototype._detachEvents = function _detachEvents() {\n    window.removeEventListener('storage', this._goToSlide);\n    window.removeEventListener('keydown', this._handleKeyPress);\n    window.removeEventListener('resize', this._handleScreenChange);\n  };\n\n  Manager.prototype._startAutoplay = function _startAutoplay() {\n    var _this2 = this;\n\n    clearInterval(this.autoplayInterval);\n    this.setState({\n      autoplaying: true\n    });\n    this.autoplayInterval = setInterval(function () {\n      _this2._nextSlide();\n    }, this.props.autoplayDuration);\n  };\n\n  Manager.prototype._stopAutoplay = function _stopAutoplay() {\n    this.setState({\n      autoplaying: false\n    });\n    clearInterval(this.autoplayInterval);\n  };\n\n  Manager.prototype._handleEvent = function _handleEvent(e) {\n    // eslint-disable-line complexity\n    var event = window.event ? window.event : e;\n\n    if (event.keyCode === 37 || event.keyCode === 33 || event.keyCode === 32 && event.shiftKey) {\n      this._prevSlide();\n\n      this._stopAutoplay();\n    } else if (event.keyCode === 39 || event.keyCode === 34 || event.keyCode === 32 && !event.shiftKey) {\n      this._nextSlide();\n\n      this._stopAutoplay();\n    } else if (event.altKey && event.keyCode === 79 && !event.ctrlKey && !event.metaKey) {\n      // o\n      this._toggleOverviewMode();\n    } else if (event.altKey && event.keyCode === 80 && !event.ctrlKey && !event.metaKey) {\n      // p\n      this._togglePresenterMode();\n    } else if (event.altKey && event.keyCode === 84 && !event.ctrlKey && !event.metaKey) {\n      // t\n      this._toggleTimerMode();\n    } else if (event.altKey && event.keyCode === 65 && !event.ctrlKey && !event.metaKey) {\n      // a\n      if (this.props.autoplay) {\n        this._startAutoplay();\n      }\n    }\n  };\n\n  Manager.prototype._handleKeyPress = function _handleKeyPress(e) {\n    var event = window.event ? window.event : e;\n\n    if (event.target instanceof HTMLInputElement || event.target.type === 'textarea') {\n      return;\n    }\n\n    this._handleEvent(e);\n  };\n\n  Manager.prototype._handleScreenChange = function _handleScreenChange() {\n    this.setState({\n      fullscreen: window.innerHeight === screen.height,\n      mobile: window.innerWidth < this.props.contentWidth\n    });\n  };\n\n  Manager.prototype._toggleOverviewMode = function _toggleOverviewMode() {\n    var suffix = this.props.route.params.indexOf('overview') !== -1 ? '' : '?overview';\n    this.context.history.replace('/' + this.props.route.slide + suffix);\n  };\n\n  Manager.prototype._togglePresenterMode = function _togglePresenterMode() {\n    var suffix = this.props.route.params.indexOf('presenter') !== -1 ? '' : '?presenter';\n    this.context.history.replace('/' + this.props.route.slide + suffix);\n  };\n\n  Manager.prototype._toggleTimerMode = function _toggleTimerMode() {\n    var isTimer = this.props.route.params.indexOf('presenter') !== -1 && this.props.route.params.indexOf('timer') !== -1;\n    var suffix = isTimer ? '?presenter' : '?presenter&timer';\n    this.context.history.replace('/' + this.props.route.slide + suffix);\n  };\n\n  Manager.prototype._getSuffix = function _getSuffix() {\n    if (this.props.route.params.indexOf('presenter') !== -1) {\n      var isTimerMode = this.props.route.params.indexOf('timer') !== -1;\n      return isTimerMode ? '?presenter&timer' : '?presenter';\n    } else if (this.props.route.params.indexOf('overview') !== -1) {\n      return '?overview';\n    } else {\n      return '';\n    }\n  };\n\n  Manager.prototype._goToSlide = function _goToSlide(e) {\n    if (e.key === 'spectacle-slide') {\n      var data = JSON.parse(e.newValue);\n\n      var slideIndex = this._getSlideIndex();\n\n      this.setState({\n        lastSlideIndex: slideIndex || 0\n      });\n\n      if (this._checkFragments(this.props.route.slide, data.forward)) {\n        this.context.history.replace('/' + data.slide + this._getSuffix());\n      }\n    }\n  };\n\n  Manager.prototype._prevSlide = function _prevSlide() {\n    var slideIndex = this._getSlideIndex();\n\n    this.setState({\n      lastSlideIndex: slideIndex\n    });\n\n    if (this._checkFragments(this.props.route.slide, false) || this.props.route.params.indexOf('overview') !== -1) {\n      if (slideIndex > 0) {\n        this.context.history.replace('/' + this._getHash(slideIndex - 1) + this._getSuffix());\n        localStorage.setItem('spectacle-slide', (0, _stringify2.default)({\n          slide: this._getHash(slideIndex - 1),\n          forward: false,\n          time: Date.now()\n        }));\n      }\n    } else if (slideIndex > 0) {\n      localStorage.setItem('spectacle-slide', (0, _stringify2.default)({\n        slide: this._getHash(slideIndex),\n        forward: false,\n        time: Date.now()\n      }));\n    }\n  };\n\n  Manager.prototype._nextSlide = function _nextSlide() {\n    var slideIndex = this._getSlideIndex();\n\n    this.setState({\n      lastSlideIndex: slideIndex\n    });\n    var slideReference = this.state.slideReference;\n\n    if (this._checkFragments(this.props.route.slide, true) || this.props.route.params.indexOf('overview') !== -1) {\n      if (slideIndex === slideReference.length - 1) {\n        // On last slide, loop to first slide\n        if (this.props.autoplay && this.state.autoplaying) {\n          var slideData = '{ \"slide\": \"0\", \"forward\": \"false\" }';\n\n          this._goToSlide({\n            key: 'spectacle-slide',\n            newValue: slideData\n          });\n        }\n      } else if (slideIndex < slideReference.length - 1) {\n        this.context.history.replace('/' + (this._getHash(slideIndex + 1) + this._getSuffix()));\n        localStorage.setItem('spectacle-slide', (0, _stringify2.default)({\n          slide: this._getHash(slideIndex + 1),\n          forward: true,\n          time: Date.now()\n        }));\n      }\n    } else if (slideIndex < slideReference.length) {\n      localStorage.setItem('spectacle-slide', (0, _stringify2.default)({\n        slide: this._getHash(slideIndex),\n        forward: true,\n        time: Date.now()\n      }));\n    }\n  };\n\n  Manager.prototype._getHash = function _getHash(slideIndex) {\n    return this.state.slideReference[slideIndex].id;\n  };\n\n  Manager.prototype._checkFragments = function _checkFragments(slide, forward) {\n    var state = this.context.store.getState();\n    var fragments = state.fragment.fragments; // Not proud of this at all. 0.14 Parent based contexts will fix this.\n\n    if (this.props.route.params.indexOf('presenter') !== -1) {\n      var main = document.querySelector('.spectacle-presenter-main');\n\n      if (main) {\n        var frags = main.querySelectorAll('.fragment');\n\n        if (!frags.length) {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    }\n\n    if (slide in fragments) {\n      var count = (0, _size2.default)(fragments[slide]);\n      var visible = (0, _filter2.default)(fragments[slide], function (s) {\n        return s.visible === true;\n      });\n      var hidden = (0, _filter2.default)(fragments[slide], function (s) {\n        return s.visible !== true;\n      });\n\n      if (forward === true && visible.length !== count) {\n        this.props.dispatch((0, _actions.updateFragment)({\n          fragment: hidden[0],\n          visible: true\n        }));\n        return false;\n      }\n\n      if (forward === false && hidden.length !== count) {\n        this.props.dispatch((0, _actions.updateFragment)({\n          fragment: visible[(0, _size2.default)(visible) - 1],\n          visible: false\n        }));\n        return false;\n      }\n\n      return true;\n    } else {\n      return true;\n    }\n  };\n\n  Manager.prototype._getTouchEvents = function _getTouchEvents() {\n    var self = this;\n    return {\n      onTouchStart: function onTouchStart(e) {\n        self.touchObject = {\n          startX: e.touches[0].pageX,\n          startY: e.touches[0].pageY\n        };\n      },\n      onTouchMove: function onTouchMove(e) {\n        var direction = self._swipeDirection({\n          x1: self.touchObject.startX,\n          x2: e.touches[0].pageX,\n          y1: self.touchObject.startY,\n          y2: e.touches[0].pageY\n        });\n\n        self.touchObject = {\n          startX: self.touchObject.startX,\n          startY: self.touchObject.startY,\n          endX: e.clientX,\n          endY: e.clientY,\n          length: Math.round(Math.sqrt(Math.pow(e.touches[0].pageX - self.touchObject.startX, 2))),\n          direction: direction\n        };\n\n        if (direction !== 0) {\n          e.preventDefault();\n        }\n      },\n      onTouchEnd: function onTouchEnd(e) {\n        self._handleSwipe(e);\n      },\n      onTouchCancel: function onTouchCancel(e) {\n        self._handleSwipe(e);\n      }\n    };\n  };\n\n  Manager.prototype.handleClick = function handleClick(e) {\n    if (this.clickSafe === true) {\n      e.preventDefault();\n      e.stopPropagation();\n      e.nativeEvent.stopPropagation();\n    }\n  };\n\n  Manager.prototype._handleSwipe = function _handleSwipe() {\n    if (typeof this.touchObject.length !== 'undefined' && this.touchObject.length > 44) {\n      this.clickSafe = true;\n    } else {\n      this.clickSafe = false;\n    }\n\n    if (Math.abs(this.touchObject.length) > 20) {\n      if (this.touchObject.direction === 1) {\n        this._nextSlide();\n      } else if (this.touchObject.direction === -1) {\n        this._prevSlide();\n      }\n    }\n\n    this.touchObject = {};\n  };\n\n  Manager.prototype._swipeDirection = function _swipeDirection(touch) {\n    var xDist = touch.x1 - touch.x2;\n    var yDist = touch.y1 - touch.y2;\n    var r = Math.atan2(yDist, xDist);\n    var swipeAngle = Math.round(r * 180 / Math.PI);\n\n    if (swipeAngle < 0) {\n      swipeAngle = 360 - Math.abs(swipeAngle);\n    }\n\n    if (swipeAngle <= 45 && swipeAngle >= 0) {\n      return 1;\n    }\n\n    if (swipeAngle <= 360 && swipeAngle >= 315) {\n      return 1;\n    }\n\n    if (swipeAngle >= 135 && swipeAngle <= 225) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  Manager.prototype._buildSlideReference = function _buildSlideReference() {\n    var slideReference = [];\n\n    _react.Children.toArray(this.props.children).forEach(function (child, rootIndex) {\n      if (!child.props.hasSlideChildren) {\n        slideReference.push({\n          id: child.props.id || slideReference.length,\n          rootIndex: rootIndex\n        });\n      } else {\n        child.props.children.forEach(function (setSlide, setIndex) {\n          slideReference.push({\n            id: setSlide.props.id || slideReference.length,\n            setIndex: setIndex,\n            rootIndex: rootIndex\n          });\n        });\n      }\n    });\n\n    return slideReference;\n  };\n\n  Manager.prototype._getSlideIndex = function _getSlideIndex() {\n    var _this3 = this;\n\n    var index = parseInt(this.props.route.slide);\n\n    if (!(0, _isFinite2.default)(index)) {\n      var foundIndex = (0, _findIndex2.default)(this.state.slideReference, function (reference) {\n        return _this3.props.route.slide === reference.id;\n      });\n      index = foundIndex >= 0 ? foundIndex : 0;\n    }\n\n    return index;\n  };\n\n  Manager.prototype._getSlideByIndex = function _getSlideByIndex(index) {\n    return (0, _slides.getSlideByIndex)(this.props.children, this.state.slideReference, index);\n  };\n\n  Manager.prototype._renderSlide = function _renderSlide() {\n    var slideIndex = this._getSlideIndex();\n\n    var slide = this._getSlideByIndex(slideIndex);\n\n    return (0, _react.cloneElement)(slide, {\n      dispatch: this.props.dispatch,\n      fragments: this.props.fragment,\n      key: slideIndex,\n      export: this.props.route.params.indexOf('export') !== -1,\n      print: this.props.route.params.indexOf('print') !== -1,\n      children: _react.Children.toArray(slide.props.children),\n      hash: this.props.route.slide,\n      slideIndex: slideIndex,\n      lastSlideIndex: this.state.lastSlideIndex,\n      transition: (slide.props.transition || {}).length ? slide.props.transition : this.props.transition,\n      transitionDuration: (slide.props.transition || {}).transitionDuration ? slide.props.transitionDuration : this.props.transitionDuration,\n      slideReference: this.state.slideReference\n    });\n  };\n\n  Manager.prototype.render = function render() {\n    if (this.props.route.slide === null) {\n      return false;\n    }\n\n    var globals = this.props.route.params.indexOf('export') !== -1 ? {\n      body: (0, _assign2.default)(this.context.styles.global.body, {\n        minWidth: this.props.contentWidth + 150,\n        minHeight: this.props.contentHeight + 150,\n        overflow: 'auto'\n      }),\n      '.spectacle-presenter-next .fragment': {\n        display: 'none !important'\n      }\n    } : {\n      '.spectacle-presenter-next .fragment': {\n        display: 'none !important'\n      }\n    };\n    var styles = {\n      deck: {\n        backgroundColor: this.props.route.params.indexOf('presenter') !== -1 || this.props.route.params.indexOf('overview') !== -1 ? 'black' : '',\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%'\n      },\n      transition: {\n        height: '100%',\n        width: '100%',\n        perspective: 1000,\n        transformStyle: 'flat'\n      }\n    };\n    var componentToRender = void 0;\n\n    var children = _react.Children.toArray(this.props.children);\n\n    if (this.props.route.params.indexOf('presenter') !== -1) {\n      var isTimerMode = this.props.route.params.indexOf('timer') !== -1;\n      componentToRender = (0, _jsx3.default)(_presenter2.default, {\n        dispatch: this.props.dispatch,\n        slides: children,\n        slideReference: this.state.slideReference,\n        slideIndex: this._getSlideIndex(),\n        hash: this.props.route.slide,\n        route: this.props.route,\n        lastSlideIndex: this.state.lastSlideIndex,\n        timer: isTimerMode\n      });\n    } else if (this.props.route.params.indexOf('export') !== -1) {\n      componentToRender = (0, _jsx3.default)(_export2.default, {\n        slides: children,\n        slideReference: this.state.slideReference,\n        route: this.props.route\n      });\n    } else if (this.props.route.params.indexOf('overview') !== -1) {\n      componentToRender = (0, _jsx3.default)(_overview2.default, {\n        slides: children,\n        slideReference: this.state.slideReference,\n        slideIndex: this._getSlideIndex(),\n        route: this.props.route\n      });\n    } else {\n      componentToRender = (0, _jsx3.default)(TransitionGroup, {\n        component: 'div',\n        style: [styles.transition]\n      }, void 0, this._renderSlide());\n    }\n\n    var showControls = !this.state.fullscreen && !this.state.mobile && this.props.route.params.indexOf('export') === -1 && this.props.route.params.indexOf('overview') === -1 && this.props.route.params.indexOf('presenter') === -1;\n    var _context$styles$googl = this.context.styles.googleFonts,\n        googleFonts = _context$styles$googl === undefined ? {} : _context$styles$googl;\n    var googleFontsElements = (0, _keys2.default)(googleFonts).map(function (key, index) {\n      return (0, _jsx3.default)(_typeface2.default, {\n        googleFont: googleFonts[key].name,\n        styles: googleFonts[key].styles\n      }, 'gFont-' + index);\n    });\n    return _react2.default.createElement('div', (0, _extends3.default)({\n      className: 'spectacle-deck',\n      style: [styles.deck],\n      onClick: this.handleClick\n    }, this._getTouchEvents()), this.props.controls && showControls && (0, _jsx3.default)(_controls2.default, {\n      currentSlideIndex: this._getSlideIndex(),\n      totalSlides: this.state.slideReference.length,\n      onPrev: this._prevSlide.bind(this),\n      onNext: this._nextSlide.bind(this)\n    }), googleFontsElements, componentToRender, this.props.route.params.indexOf('export') === -1 && this.props.route.params.indexOf('overview') === -1 ? (0, _jsx3.default)(_progress2.default, {\n      items: this.state.slideReference,\n      currentSlideIndex: this._getSlideIndex(),\n      type: this.props.progress\n    }) : '', this.props.route.params.indexOf('export') === -1 ? _ref : '', this.props.autoplay ? (0, _jsx3.default)(_autoplayControls2.default, {\n      autoplaying: this.state.autoplaying,\n      onPlay: this._startAutoplay,\n      onPause: this._stopAutoplay\n    }) : '', this.props.globalStyles && (0, _jsx3.default)(_radium.Style, {\n      rules: (0, _assign2.default)(this.context.styles.global, globals)\n    }));\n  };\n\n  return Manager;\n}(_react.Component), _class2.displayName = 'Manager', _class2.defaultProps = {\n  autoplay: false,\n  autoplayDuration: 7000,\n  contentWidth: 1000,\n  contentHeight: 700,\n  transition: [],\n  transitionDuration: 500,\n  progress: 'pacman',\n  controls: true,\n  globalStyles: true\n}, _class2.contextTypes = {\n  styles: _propTypes2.default.object,\n  print: _propTypes2.default.object,\n  history: _propTypes2.default.object,\n  presenter: _propTypes2.default.bool,\n  export: _propTypes2.default.bool,\n  overview: _propTypes2.default.bool,\n  store: _propTypes2.default.object,\n  slide: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])\n}, _class2.childContextTypes = {\n  contentWidth: _propTypes2.default.number,\n  contentHeight: _propTypes2.default.number\n}, _temp)) || _class) || _class);\nexports.default = Manager;","map":null,"metadata":{},"sourceType":"script"}