{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactCodemirror = require(\"react-codemirror\");\n\nvar _reactCodemirror2 = _interopRequireDefault(_reactCodemirror);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint new-cap:0 no-unused-vars:0 */\n\n\nif (typeof window !== \"undefined\") {\n  require(\"codemirror/mode/jsx/jsx\");\n}\n\nvar Editor = function (_Component) {\n  _inherits(Editor, _Component);\n\n  function Editor() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Editor);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Editor.__proto__ || Object.getPrototypeOf(Editor)).call.apply(_ref, [this].concat(args))), _this), _this.componentDidMount = function () {\n      var editor = _this.refs.editor.getCodeMirror();\n\n      _this.highlightSelectedLines(editor, _this.props.selectedLines);\n    }, _this.highlightSelectedLines = function (editor, selectedLines) {\n      if (Array.isArray(selectedLines)) {\n        selectedLines.forEach(function (lineNumber) {\n          return editor.addLineClass(lineNumber, \"wrap\", \"CodeMirror-activeline-background\");\n        });\n      }\n    }, _this.updateCode = function (code) {\n      if (!_this.props.readOnly && _this.props.onChange) {\n        _this.props.onChange(code);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Editor, [{\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          className = _props.className,\n          external = _props.external,\n          style = _props.style,\n          codeText = _props.codeText,\n          theme = _props.theme,\n          readOnly = _props.readOnly;\n      var options = {\n        mode: \"jsx\",\n        lineNumbers: false,\n        lineWrapping: true,\n        smartIndent: false,\n        matchBrackets: true,\n        theme: theme,\n        readOnly: readOnly\n      };\n      return _react2.default.createElement(_reactCodemirror2.default, {\n        ref: \"editor\",\n        className: className,\n        external: external,\n        options: options,\n        style: style,\n        value: codeText,\n        onChange: this.updateCode\n      });\n    }\n  }]);\n\n  return Editor;\n}(_react.Component);\n\nEditor.propTypes = {\n  theme: _propTypes2.default.string,\n  readOnly: _propTypes2.default.bool,\n  external: _propTypes2.default.bool,\n  codeText: _propTypes2.default.string,\n  selectedLines: _propTypes2.default.array,\n  onChange: _propTypes2.default.func,\n  style: _propTypes2.default.object,\n  className: _propTypes2.default.string\n};\nexports.default = Editor;","map":null,"metadata":{},"sourceType":"script"}